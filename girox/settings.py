"""
Django settings for girox project.

Generated by 'django-admin startproject' using Django 1.10.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
from django.utils.translation import ugettext_lazy as _
from urllib.parse import urlparse

from decouple import config, Csv
from dj_database_url import parse as dburl
from django.contrib.messages import constants as message_constants

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

DEVELOPER = config('DEVELOPER', default=False, cast=bool)

MESSAGE_LEVEL = message_constants.DEBUG

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default=[], cast=Csv())

INTERNAL_IPS = ['127.0.0.1', '0.0.0.0']

ADMINS = [('Alessandro', 'alessandrolimafolk@gmail.com'),]

AUTH_USER_MODEL = 'authentication.MyUser'

SITE_ID = 1


# Email configuration

DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL')

EMAIL_BACKEND = config('EMAIL_BACKEND')

EMAIL_HOST = config('EMAIL_HOST')

EMAIL_PORT = config('EMAIL_PORT', cast=int)

EMAIL_USE_TLS = config('EMAIL_USE_TLS', cast=bool)

EMAIL_HOST_USER = config('EMAIL_HOST_USER')

EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')


# Application definition

DJANGO_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.sitemaps',
)
if DEVELOPER:
    DJANGO_APPS += (
        'django.contrib.admindocs',
    )

THIRD_PARTS_APPS = (
    'test_without_migrations',
    'django_extensions',
    'debug_toolbar',
    'storages',
    'taggit',
    'django_cleanup',
    # 'easy_thumbnails',
    'versatileimagefield',  # http://django-versatileimagefield.readthedocs.io/en/latest/index.html
)

PROJECT_APPS = (
    'girox.authentication.apps.AuthenticationConfig',
    'girox.core.apps.CoreConfig',
    'girox.event.apps.EventConfig',
    'girox.gallery.apps.GalleryConfig',

    'girox.frontend',
)

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTS_APPS + PROJECT_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',

    'django.middleware.locale.LocaleMiddleware',
]

ROOT_URLCONF = 'girox.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
                'girox.frontend.context_processors.context_processor',
            ],
        },
    },
]

WSGI_APPLICATION = 'girox.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

default_dburl = 'sqlite:///' + os.path.join(BASE_DIR, 'db.sqlite3')
DATABASES = {
    'default': config('DATABASE_URL', default=default_dburl, cast=dburl),
}


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'pt-br'

LANGUAGES = (
    ('pt-br', _('Brazilian Portuguese')),
    ('en', _('English')),
)

LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

USE_THOUSAND_SEPARATOR = True


# S3 AWS

# AWS_HEADERS = {  # see http://developer.yahoo.com/performance/rules.html#expires
#     'Expires': 'Thu, 31 Dec 2099 20:00:00 GMT',
#     'Cache-Control': 'max-age=94608000',
# }
#
# AWS_S3_OBJECT_PARAMETERS = {
#     'CacheControl': 'max-age=86400',
# }

AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME')
AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')
AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME

if DEVELOPER:
    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
else:
    STATICFILES_LOCATION = 'static'
    STATICFILES_STORAGE = 'custom_storages.StaticStorage'
    STATIC_URL = "https://%s/%s/" % (AWS_S3_CUSTOM_DOMAIN, STATICFILES_LOCATION)
    MEDIAFILES_LOCATION = 'media'
    MEDIA_URL = "https://%s/%s/" % (AWS_S3_CUSTOM_DOMAIN, MEDIAFILES_LOCATION)
    DEFAULT_FILE_STORAGE = 'custom_storages.MediaStorage'


# Setting easy_thumbnails
# https://github.com/SmileyChris/easy-thumbnails
# THUMBNAIL_ALIASES = {
#     '': {
#         'mini_photo':  {'size': (220, 220), 'crop': False, 'upscale': True},
#         'modal_photo': {'size': (600, 600), 'crop': False, 'upscale': True},
#         'cover_photo': {'size': (450, 450), 'crop': False, 'upscale': True},
#     }
# }


# Settings for versatileimagefield
VERSATILEIMAGEFIELD_SETTINGS = {
    # Whether or not to create new images on-the-fly. Set this to `False` for
    # speedy performance but don't forget to 'pre-warm' to ensure they're
    # created and available at the appropriate URL.
    'create_images_on_demand': False,
}

VERSATILEIMAGEFIELD_RENDITION_KEY_SETS = {
    'gallery': [
        ('mini_photo', 'thumbnail__220x220'),
        ('modal_photo', 'thumbnail__600x600'),
    ],
}


# Frontend
SITE_NAME = 'GiroX | Seu evento esportivo'
SITE_SHORT_NAME = 'GiroX'

# Canonical SEO
SITE_CANONICAL = 'http://www.girox.com.br/'

# Social tags
SITE_KEYWORDS = 'girox, esporte apucarana, evento esportivo apucarana'
SITE_DESCRIPTION = 'Esportes em Apucarana e Regi√£o.'
SITE_IMAGE = 'https://s3-sa-east-1.amazonaws.com/girox/girox.png'

# Twitter Card data
TWITTER_SITE = '@giroxesportes'
TWITTER_CREATOR = '@sandrofolk'

# Open Graph data
SITE_FB_APP_ID = ''


# https://django-taggit.readthedocs.io/en/latest/index.html

TAGGIT_CASE_INSENSITIVE = True
